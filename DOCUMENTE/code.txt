// usa deschisa / inchisa 
from machine import Pin
import utime
import _thread

btn = Pin(15,Pin.IN) # deschide usa 
btn2 = Pin(16,Pin.IN) # inchide usa
btn3 = Pin(13,Pin.IN) #validare card 
led = Pin(14,Pin.OUT)
state = False
def blinking():
    global state
    while True:
         while state:
            led.value(1)
            utime.sleep(1)
            led.value(0)
            utime.sleep(1)
_thread.start_new_thread(blinking,())
while True:
    if btn.value() == 1:
        state = True
        print("usa deschisa ",state)
        utime.sleep(1)
    if btn2.value() ==1:
        state = False
        print("usa inchisa",state)
        utime.sleep(1)

        
    
 
// A MERS FUTU-I CODUL SA I L FUT 
from machine import Pin
from time import sleep
import _thread

btn = Pin(15, Pin.IN)  # deschide usa 
btn2 = Pin(16, Pin.IN)  # inchide usa
btn3 = Pin(13, Pin.IN)  # validare card 
led = Pin(14, Pin.OUT)

state = False  # usa e inchisa
card_state = False  # cardul nu a fost validat
btn3_state = False 

lock = _thread.allocate_lock()  # Definește lock global

def timer():
    global state, card_state, lock
    x = 20
    while x >= 0 and state:
        with lock:
            if btn3_state == True:
                print("Cardul a fost validat\nAcces permis")
                return
        x -= 1
        print(f"Mai aveți {x} secunde până se activează alarma")
        sleep(1)

def cardValidation():
    global card_state, btn3_state, lock
    lock.acquire()
    card_state = True
    btn3_state = True  # Actualizează starea butonului btn3
    lock.release()

while True:
    if btn.value() == 1:
        with lock:
            state = True
        print("Usa s-a deschis")
        sleep(0.5)
        _thread.start_new_thread(timer, ())
    if btn2.value() == 1:
        print("Usa s-a inchis")
        sleep(1)
        with lock:
            state = False  
            card_state = False
            btn3_state = False  # Resetarea stării butonului btn3
    if btn3.value() == 1:
        cardValidation()

